<?php
/**
 * Classe `WShield`
 *
 * üî• Objectif :
 * - Fournir des m√©thodes utilitaires pour **valider des cha√Ænes, des tableaux et des nombres**.
 * - V√©rifier si une **cha√Æne est vide**, si un **tableau est vide**, ou si un **nombre est dans une plage donn√©e**.
 */
final class WShield {
    private const REGEX_IPV4 = '/^(?:(?:25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)$/';
    private const REGEX_IPV6 = '/^(
        ([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:)|
        ([0-9A-Fa-f]{1,4}:){1,7}:|
        ([0-9A-Fa-f]{1,4}:){1,6}:[0-9A-Fa-f]{1,4}|
        ([0-9A-Fa-f]{1,4}:){1,5}(:[0-9A-Fa-f]{1,4}){1,2}|
        ([0-9A-Fa-f]{1,4}:){1,4}(:[0-9A-Fa-f]{1,4}){1,3}|
        ([0-9A-Fa-f]{1,4}:){1,3}(:[0-9A-Fa-f]{1,4}){1,4}|
        ([0-9A-Fa-f]{1,4}:){1,2}(:[0-9A-Fa-f]{1,4}){1,5}|
        [0-9A-Fa-f]{1,4}:(:[0-9A-Fa-f]{1,4}){1,6}|
        :((:[0-9A-Fa-f]{1,4}){1,7}|:)|
        fe80:(:[0-9A-Fa-f]{0,4}){0,4}%[0-9a-zA-Z]+|
        ::(ffff(:0{1,4})?:)?
        ((25[0-5]|(2[0-4]|1?[0-9])?[0-9])\.){3}
        (25[0-5]|(2[0-4]|1?[0-9])?[0-9])|
        ([0-9A-Fa-f]{1,4}:){1,4}:
        ((25[0-5]|(2[0-4]|1?[0-9])?[0-9])\.){3}
        (25[0-5]|(2[0-4]|1?[0-9])?[0-9])
    )$/x';


    /**
     * V√©rifie si une cha√Æne est **valide** selon des crit√®res sp√©cifiques.
     *
     * @param string $value La cha√Æne √† v√©rifier.
     * @param int $minChars (optionnel) Nombre minimal de caract√®res requis.
     * @param int $maxChars (optionnel) Nombre maximal de caract√®res autoris√©s.
     * @param ?string $regex (optionnel) Expression r√©guli√®re √† appliquer.
     * @return bool `true` si la cha√Æne est valide, `false` sinon.
     *
     * üî• Exemples :
     * ```php
     * WShield::IsValidString("");         // ‚ùå false (vide)
     * WShield::IsValidString("  ");       // ‚ùå false (uniquement des espaces)
     * WShield::IsValidString("Hello");    // ‚úÖ true (rempli)
     * WShield::IsValidString("1234", 5);  // ‚ùå false (5 caract√®res attendus)
     * WShield::IsValidString("12345", 5); // ‚úÖ true (bonne longueur)
     * WShield::IsValidString("A12B", 4, "/^[A-Z0-9]+$/"); // ‚úÖ true (match regex)
     * WShield::IsValidString("A12B", 4, "/^[0-9]+$/");    // ‚ùå false (ne match pas regex)
     * ```
     */
    public static function IsValidString(
        string &$value,     // üîπ Ajout du `&` pour modifier directement la variable
        int $minChars = 0,
        int $maxChars = 0,
        ?string $regex = null
    ) : bool {
        $value = trim($value);  // üîπ Trim appliqu√© directement √† la variable originale
        if ($value == '') return false; // üîπ V√©rifie si la cha√Æne est vide apr√®s suppression des espaces

        return !(
            (($minChars > 0 || $maxChars > 0) && !self::RangeOf($value, $minChars, $maxChars)) // üîπ V√©rifie la longueur si sp√©cifi√©e
            || (!is_null($regex) && @!preg_match($regex, $value)) // üîπ V√©rifie la regex si sp√©cifi√©e
        );
    }

    /**
     * V√©rifie si un tableau est **valide** selon sa taille.
     *
     * @param array $value Le tableau √† v√©rifier.
     * @param int $strictValue (optionnel) Nombre exact d'√©l√©ments attendu (si > 0).
     * @return bool `true` si le tableau est valide (rempli et, si pr√©cis√©, de la bonne taille).
     *
     * üî• Exemples :
     * ```php
     * WShield::IsValidArray([]);         // ‚ùå false (tableau vide)
     * WShield::IsValidArray([1, 2, 3]);  // ‚úÖ true (rempli)
     * WShield::IsValidArray([1, 2], 2);  // ‚úÖ true (exactement 2 √©l√©ments)
     * WShield::IsValidArray([1, 2], 3);  // ‚ùå false (3 attendus, mais seulement 2 pr√©sents)
     * ```
     */
    public static function IsValidArray(array $value, int $strictValue = 0): bool {
        $arraySize = count($value);
        return ($strictValue > 0) ? ($arraySize == $strictValue) : ($arraySize > 0);
    }

    /**
     * V√©rifie si **tous** les tableaux donn√©s sont valides.
     *
     * @param array $values Liste des tableaux √† v√©rifier.
     * @param array $strictValues (optionnel) Liste des tailles exactes attendues pour chaque tableau.
     * @return bool `true` si tous les tableaux sont valides, `false` sinon.
     *
     * üî• Exemples :
     * ```php
     * WShield::IsValidSeveralArrays([[], []]); // ‚ùå false (tous vides)
     * WShield::IsValidSeveralArrays([[1], []]); // ‚ùå false (un tableau est vide)
     * WShield::IsValidSeveralArrays([[1, 2], [3, 4]], [2, 2]); // ‚úÖ true (bons nombres d'√©l√©ments)
     * WShield::IsValidSeveralArrays([[1, 2], [3]], [2, 2]); // ‚ùå false (le 2e tableau est trop court)
     * ```
     */
    public static function IsValidSeveralArrays(array $values, array $strictValues = []): bool {
        $nbArrays = count($values);
        for ($i = 0; $i < $nbArrays; $i++) {
            $result = (isset($strictValues[$i]))
                ? self::IsValidArray($values[$i], $strictValues[$i])
                : self::IsValidArray($values[$i]);

            if (!$result) return false; // üîπ Si un tableau est invalide, on arr√™te et retourne `false`
        }
        return true; // üîπ Si tous sont valides, retourne `true`
    }

    /**
     * V√©rifie si une valeur est dans une plage sp√©cifique.
     *
     * @param int|float|string $value La valeur √† tester (une cha√Æne sera √©valu√©e par sa longueur).
     * @param int|float|null $minRange (optionnel) Valeur minimale accept√©e.
     * @param int|float|null $maxRange (optionnel) Valeur maximale accept√©e.
     * @return bool `true` si la valeur est dans la plage, `false` sinon.
     *
     * üî• Exemples :
     * ```php
     * WShield::RangeOf(10, 5, 15); // ‚úÖ true (10 est entre 5 et 15)
     * WShield::RangeOf(20, 5, 15); // ‚ùå false (20 est trop grand)
     * WShield::RangeOf(4, 5); // ‚ùå false (4 est trop petit)
     * WShield::RangeOf(8, null, 10); // ‚úÖ true (max 10 autoris√©)
     * WShield::RangeOf("Hello", 3, 5); // ‚úÖ true (5 caract√®res dans la plage)
     * WShield::RangeOf("Hi", 3, 5); // ‚ùå false (2 caract√®res, trop court)
     * ```
     */
    public static function RangeOf(
        int|float|string $value,
        int|float|null $minRange = null,
        int|float|null $maxRange = null
    ): bool {
        if (is_string($value)) $value = strlen(trim($value));

        if (!is_null($minRange)) {
            return (!is_null($maxRange))
                ? ($value <= $maxRange && $value >= $minRange)
                : ($value >= $minRange);
        } else if (!is_null($maxRange)) {
            return ($value <= $maxRange);
        }

        return true;
    }

    /**
     * V√©rifie si une valeur est un **nombre flottant** et si elle est dans une plage donn√©e.
     *
     * @param mixed $value La valeur √† tester.
     * @param int|float|null $minRange (optionnel) Valeur minimale accept√©e.
     * @param int|float|null $maxRange (optionnel) Valeur maximale accept√©e.
     * @return bool `true` si la valeur est un float et est dans la plage.
     *
     * üî• Exemples :
     * ```php
     * WShield::IsFloat(3.14); // ‚úÖ true
     * WShield::IsFloat(10, 5, 15); // ‚úÖ true (entre 5 et 15)
     * WShield::IsFloat(20.5, 5, 15); // ‚ùå false (trop grand)
     * WShield::IsFloat("3.14"); // ‚ùå false (c'est une string)
     * ```
     */
    public static function IsFloat(
        mixed $value,
        int|float|null $minRange = null,
        int|float|null $maxRange = null
    ): bool {
        return (is_float($value)) && self::RangeOf($value, $minRange, $maxRange);
    }

    /**
     * V√©rifie si une valeur est un **entier** et si elle est dans une plage donn√©e.
     *
     * @param mixed $value La valeur √† tester.
     * @param ?int $minRange (optionnel) Valeur minimale accept√©e.
     * @param ?int $maxRange (optionnel) Valeur maximale accept√©e.
     * @return bool `true` si la valeur est un entier et est dans la plage.
     *
     * üî• Exemples :
     * ```php
     * WShield::IsInt(10); // ‚úÖ true
     * WShield::IsInt(5, 5, 10); // ‚úÖ true (dans la plage)
     * WShield::IsInt(3.14); // ‚ùå false (c'est un float)
     * ```
     */
    public static function IsInt(mixed $value, ?int $minRange = null, ?int $maxRange = null ): bool {
        return (is_int($value)) && self::RangeOf($value, $minRange, $maxRange);
    }

    public static function IsValidIP(string $ip): bool {
        return (self::IsIPv4($ip) || self::IsIPv6($ip));
    }

    public static function IsIPv4(string $ip): bool {
        return (bool) preg_match(self::REGEX_IPV4, $ip);
    }

    public static function IsIPv6(string $ip): bool {
        return (bool) preg_match(self::REGEX_IPV6, $ip);
    }
}